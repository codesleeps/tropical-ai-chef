name: Production Build & Deploy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Verify environment configuration
        run: |
          echo "Checking environment files..."
          ls -la .env* || echo "No .env files found"

      - name: Run TypeScript compilation check
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true # Don't fail on lint warnings

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true # Don't fail on security warnings

      - name: Build application (development)
        run: npm run build:dev
        if: github.event_name == 'pull_request'

      - name: Build application (production)
        run: node scripts/build-production.js production
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        run: npm run analyze
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ matrix.node-version }}
          path: |
            dist/
            build-report.json
          retention-days: 30
        if: github.event_name == 'push' && matrix.node-version == '20.x'

      - name: Setup Pages (for production builds)
        uses: actions/configure-pages@v4
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && matrix.node-version == '20.x'

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && matrix.node-version == '20.x'

  # Security scan job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        if: always()

  # Deployment job (only for production)
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Application URL: ${{ steps.deployment.outputs.page_url }}"

          # Optional: Test deployment endpoint
          sleep 30
          curl -f -s -o /dev/null "${{ steps.deployment.outputs.page_url }}" || echo "Deployment verification failed"

  # Lighthouse performance audit (post-deployment)
  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60 # Give deployment time to propagate

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy.outputs.page_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: "./.lighthouserc.json"
        continue-on-error: true # Don't fail the workflow on performance issues

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, deploy, lighthouse-audit]
    if: always() && github.event_name == 'push'

    steps:
      - name: Deployment Status Notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Application is live and ready for production use"
          else
            echo "‚ùå Deployment failed"
            echo "üîç Check the logs for more details"
          fi

          echo "üìä Build Results:"
          echo "  - Build & Test: ${{ needs.build-and-test.result }}"
          echo "  - Security Scan: ${{ needs.security-scan.result }}"
          echo "  - Deployment: ${{ needs.deploy.result }}"
          echo "  - Lighthouse Audit: ${{ needs.lighthouse-audit.result }}"
